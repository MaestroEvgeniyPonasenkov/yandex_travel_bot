import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import config

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.token)
dp = Dispatcher()

# <a href="{config.group_link}">–≤—Å—Ç—É–ø–∏—Ç—å</a>
# {config.promo}
# <a href="https://t.me/yandex_travel_chats/3">–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å</a>


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat_member = await bot.get_chat_member(config.group_id, message.from_user.id)
    if chat_member.status not in [ChatMemberStatus.CREATOR, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.MEMBER]:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="sub"))
        await message.answer(
            f'''
–ü—Ä–∏–≤–µ—Ç! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –∫–ª—É–±–µ –Ø–Ω–¥–µ–∫—Å –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –Ω—É–∂–Ω–æ <a href="{config.group_link}">–≤—Å—Ç—É–ø–∏—Ç—å</a> –≤ –Ω–∞—à —á–∞—Ç. ''', parse_mode=ParseMode.HTML, reply_markup=builder.as_markup())
    else:
        await message.answer(f'''
–£—Ä–∞, –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É –¥–æ 20% —É–∂–µ –∑–¥–µ—Å—å: {config.promo}

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: 2000 ‚ÇΩ. –î–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –æ–¥–∏–Ω –∑–∞–∫–∞–∑ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è –≤ <a href="https://redirect.appmetrica.yandex.com/serve/1181039353179218124?afpub_id=smm&site_id=telegram&creative_id=chat03">–º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</a> –Ø–Ω–¥–µ–∫—Å –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –¥–æ 30 –∞–ø—Ä–µ–ª—è 2024 –≥–æ–¥–∞. <a href="https://yandex.ru/legal/travel_promocode/">–£—Å–ª–æ–≤–∏—è</a> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.

–ö—É–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–µ—Ö–∞—Ç—å –≤ –æ—Ç–ø—É—Å–∫? <a href="https://t.me/yandex_travel_chats/3">–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å</a> –∏–¥–µ—è–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏üåç''', parse_mode=ParseMode.HTML, disable_web_page_preview=True)


@dp.callback_query(F.data == "sub")
async def send_promo(callback: types.CallbackQuery):
    chat_member = await bot.get_chat_member(config.group_id, callback.from_user.id)
    if chat_member.status not in [ChatMemberStatus.CREATOR, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.MEMBER]:
        await callback.answer(text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
    else:
        await callback.message.answer(f'''
–£—Ä–∞, –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É –¥–æ 20% —É–∂–µ –∑–¥–µ—Å—å: {config.promo}

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: 2000 ‚ÇΩ. –î–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –æ–¥–∏–Ω –∑–∞–∫–∞–∑ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è –≤ <a href="https://redirect.appmetrica.yandex.com/serve/1181039353179218124?afpub_id=smm&site_id=telegram&creative_id=chat03">–º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</a> –Ø–Ω–¥–µ–∫—Å –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –¥–æ 30 –∞–ø—Ä–µ–ª—è 2024 –≥–æ–¥–∞. <a href="https://yandex.ru/legal/travel_promocode/">–£—Å–ª–æ–≤–∏—è</a> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.

–ö—É–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–µ—Ö–∞—Ç—å –≤ –æ—Ç–ø—É—Å–∫? <a href="https://t.me/yandex_travel_chats/3">–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å</a> –∏–¥–µ—è–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏üåç''', parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        await callback.answer()


@dp.message(F.text)
async def all_messages(message: types.Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!')


# @dp.message(F.content_type == types.ContentType.NEW_CHAT_MEMBERS)
# async def new_chat_members(message: types.Message):
#     new_members = message.new_chat_members
#     for member in new_members:
#         await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.first_name}!")
#         print(message.chat.id)
#         await bot.send_message(chat_id=member.id, text='–ü—Ä–∏–≤–µ—Ç)')


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(e)
